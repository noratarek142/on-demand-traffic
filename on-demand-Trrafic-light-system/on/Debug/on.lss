
on.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001c14  00001ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  00001db0  2**0
                  ALLOC
  3 .stab         00001668  00000000  00000000  00001db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e24  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000423c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f6  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002393  00000000  00000000  000045d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001374  00000000  00000000  00006965  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001238  00000000  00000000  00007cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00008f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ff  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009de  00000000  00000000  000093d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009db1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e1       	ldi	r30, 0x14	; 20
      78:	fc e1       	ldi	r31, 0x1C	; 28
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <main>
      8a:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__epilogue_restores__+0x18>

000007ea <__ltsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__ltsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__ltsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__ltsf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__epilogue_restores__+0x18>

0000084a <__floatsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__prologue_saves__+0x12>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	da 01       	movw	r26, r20
     860:	c9 01       	movw	r24, r18
     862:	88 27       	eor	r24, r24
     864:	b7 fd       	sbrc	r27, 7
     866:	83 95       	inc	r24
     868:	99 27       	eor	r25, r25
     86a:	aa 27       	eor	r26, r26
     86c:	bb 27       	eor	r27, r27
     86e:	b8 2e       	mov	r11, r24
     870:	21 15       	cp	r18, r1
     872:	31 05       	cpc	r19, r1
     874:	41 05       	cpc	r20, r1
     876:	51 05       	cpc	r21, r1
     878:	19 f4       	brne	.+6      	; 0x880 <__stack+0x21>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	3a c0       	rjmp	.+116    	; 0x8f4 <__stack+0x95>
     880:	88 23       	and	r24, r24
     882:	a9 f0       	breq	.+42     	; 0x8ae <__stack+0x4f>
     884:	20 30       	cpi	r18, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	38 07       	cpc	r19, r24
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	48 07       	cpc	r20, r24
     88e:	80 e8       	ldi	r24, 0x80	; 128
     890:	58 07       	cpc	r21, r24
     892:	29 f4       	brne	.+10     	; 0x89e <__stack+0x3f>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	9f ec       	ldi	r25, 0xCF	; 207
     89c:	30 c0       	rjmp	.+96     	; 0x8fe <__stack+0x9f>
     89e:	ee 24       	eor	r14, r14
     8a0:	ff 24       	eor	r15, r15
     8a2:	87 01       	movw	r16, r14
     8a4:	e2 1a       	sub	r14, r18
     8a6:	f3 0a       	sbc	r15, r19
     8a8:	04 0b       	sbc	r16, r20
     8aa:	15 0b       	sbc	r17, r21
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	79 01       	movw	r14, r18
     8b0:	8a 01       	movw	r16, r20
     8b2:	8e e1       	ldi	r24, 0x1E	; 30
     8b4:	c8 2e       	mov	r12, r24
     8b6:	d1 2c       	mov	r13, r1
     8b8:	dc 82       	std	Y+4, r13	; 0x04
     8ba:	cb 82       	std	Y+3, r12	; 0x03
     8bc:	ed 82       	std	Y+5, r14	; 0x05
     8be:	fe 82       	std	Y+6, r15	; 0x06
     8c0:	0f 83       	std	Y+7, r16	; 0x07
     8c2:	18 87       	std	Y+8, r17	; 0x08
     8c4:	c8 01       	movw	r24, r16
     8c6:	b7 01       	movw	r22, r14
     8c8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	18 16       	cp	r1, r24
     8d0:	19 06       	cpc	r1, r25
     8d2:	84 f4       	brge	.+32     	; 0x8f4 <__stack+0x95>
     8d4:	08 2e       	mov	r0, r24
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	ee 0c       	add	r14, r14
     8da:	ff 1c       	adc	r15, r15
     8dc:	00 1f       	adc	r16, r16
     8de:	11 1f       	adc	r17, r17
     8e0:	0a 94       	dec	r0
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <__stack+0x79>
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 1a       	sub	r12, r24
     8ee:	d9 0a       	sbc	r13, r25
     8f0:	dc 82       	std	Y+4, r13	; 0x04
     8f2:	cb 82       	std	Y+3, r12	; 0x03
     8f4:	ba 82       	std	Y+2, r11	; 0x02
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     8fe:	28 96       	adiw	r28, 0x08	; 8
     900:	e9 e0       	ldi	r30, 0x09	; 9
     902:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__epilogue_restores__+0x12>

00000906 <__fixsfsi>:
     906:	ac e0       	ldi	r26, 0x0C	; 12
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__prologue_saves__+0x20>
     912:	69 83       	std	Y+1, r22	; 0x01
     914:	7a 83       	std	Y+2, r23	; 0x02
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	be 01       	movw	r22, r28
     920:	6b 5f       	subi	r22, 0xFB	; 251
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	61 f1       	breq	.+88     	; 0x986 <__fixsfsi+0x80>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	50 f1       	brcs	.+84     	; 0x986 <__fixsfsi+0x80>
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	21 f4       	brne	.+8      	; 0x93e <__fixsfsi+0x38>
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	88 23       	and	r24, r24
     93a:	51 f1       	breq	.+84     	; 0x990 <__fixsfsi+0x8a>
     93c:	2e c0       	rjmp	.+92     	; 0x99a <__fixsfsi+0x94>
     93e:	2f 81       	ldd	r18, Y+7	; 0x07
     940:	38 85       	ldd	r19, Y+8	; 0x08
     942:	37 fd       	sbrc	r19, 7
     944:	20 c0       	rjmp	.+64     	; 0x986 <__fixsfsi+0x80>
     946:	6e 81       	ldd	r22, Y+6	; 0x06
     948:	2f 31       	cpi	r18, 0x1F	; 31
     94a:	31 05       	cpc	r19, r1
     94c:	1c f0       	brlt	.+6      	; 0x954 <__fixsfsi+0x4e>
     94e:	66 23       	and	r22, r22
     950:	f9 f0       	breq	.+62     	; 0x990 <__fixsfsi+0x8a>
     952:	23 c0       	rjmp	.+70     	; 0x99a <__fixsfsi+0x94>
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	82 1b       	sub	r24, r18
     95a:	93 0b       	sbc	r25, r19
     95c:	29 85       	ldd	r18, Y+9	; 0x09
     95e:	3a 85       	ldd	r19, Y+10	; 0x0a
     960:	4b 85       	ldd	r20, Y+11	; 0x0b
     962:	5c 85       	ldd	r21, Y+12	; 0x0c
     964:	04 c0       	rjmp	.+8      	; 0x96e <__fixsfsi+0x68>
     966:	56 95       	lsr	r21
     968:	47 95       	ror	r20
     96a:	37 95       	ror	r19
     96c:	27 95       	ror	r18
     96e:	8a 95       	dec	r24
     970:	d2 f7       	brpl	.-12     	; 0x966 <__fixsfsi+0x60>
     972:	66 23       	and	r22, r22
     974:	b1 f0       	breq	.+44     	; 0x9a2 <__fixsfsi+0x9c>
     976:	50 95       	com	r21
     978:	40 95       	com	r20
     97a:	30 95       	com	r19
     97c:	21 95       	neg	r18
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	0e c0       	rjmp	.+28     	; 0x9a2 <__fixsfsi+0x9c>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__fixsfsi+0x9c>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f ef       	ldi	r20, 0xFF	; 255
     996:	5f e7       	ldi	r21, 0x7F	; 127
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <__fixsfsi+0x9c>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e8       	ldi	r21, 0x80	; 128
     9a2:	b9 01       	movw	r22, r18
     9a4:	ca 01       	movw	r24, r20
     9a6:	2c 96       	adiw	r28, 0x0c	; 12
     9a8:	e2 e0       	ldi	r30, 0x02	; 2
     9aa:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__epilogue_restores__+0x20>

000009ae <__floatunsisf>:
     9ae:	a8 e0       	ldi	r26, 0x08	; 8
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__prologue_saves__+0x10>
     9ba:	7b 01       	movw	r14, r22
     9bc:	8c 01       	movw	r16, r24
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	81 05       	cpc	r24, r1
     9c4:	91 05       	cpc	r25, r1
     9c6:	19 f4       	brne	.+6      	; 0x9ce <__floatunsisf+0x20>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	60 c0       	rjmp	.+192    	; 0xa8e <__floatunsisf+0xe0>
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     9ec:	fc 01       	movw	r30, r24
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	f7 ff       	sbrs	r31, 7
     9f2:	3b c0       	rjmp	.+118    	; 0xa6a <__floatunsisf+0xbc>
     9f4:	22 27       	eor	r18, r18
     9f6:	33 27       	eor	r19, r19
     9f8:	2e 1b       	sub	r18, r30
     9fa:	3f 0b       	sbc	r19, r31
     9fc:	57 01       	movw	r10, r14
     9fe:	68 01       	movw	r12, r16
     a00:	02 2e       	mov	r0, r18
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__floatunsisf+0x5e>
     a04:	d6 94       	lsr	r13
     a06:	c7 94       	ror	r12
     a08:	b7 94       	ror	r11
     a0a:	a7 94       	ror	r10
     a0c:	0a 94       	dec	r0
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__floatunsisf+0x56>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__floatunsisf+0x7c>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	aa 1f       	adc	r26, r26
     a28:	bb 1f       	adc	r27, r27
     a2a:	2a 95       	dec	r18
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__floatunsisf+0x74>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8e 21       	and	r24, r14
     a36:	9f 21       	and	r25, r15
     a38:	a0 23       	and	r26, r16
     a3a:	b1 23       	and	r27, r17
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	a1 05       	cpc	r26, r1
     a40:	b1 05       	cpc	r27, r1
     a42:	21 f0       	breq	.+8      	; 0xa4c <__floatunsisf+0x9e>
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	4a 29       	or	r20, r10
     a4e:	5b 29       	or	r21, r11
     a50:	6c 29       	or	r22, r12
     a52:	7d 29       	or	r23, r13
     a54:	4d 83       	std	Y+5, r20	; 0x05
     a56:	5e 83       	std	Y+6, r21	; 0x06
     a58:	6f 83       	std	Y+7, r22	; 0x07
     a5a:	78 87       	std	Y+8, r23	; 0x08
     a5c:	8e e1       	ldi	r24, 0x1E	; 30
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	8e 1b       	sub	r24, r30
     a62:	9f 0b       	sbc	r25, r31
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	12 c0       	rjmp	.+36     	; 0xa8e <__floatunsisf+0xe0>
     a6a:	30 97       	sbiw	r30, 0x00	; 0
     a6c:	81 f0       	breq	.+32     	; 0xa8e <__floatunsisf+0xe0>
     a6e:	0e 2e       	mov	r0, r30
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0xcc>
     a72:	ee 0c       	add	r14, r14
     a74:	ff 1c       	adc	r15, r15
     a76:	00 1f       	adc	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	0a 94       	dec	r0
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0xc4>
     a7e:	ed 82       	std	Y+5, r14	; 0x05
     a80:	fe 82       	std	Y+6, r15	; 0x06
     a82:	0f 83       	std	Y+7, r16	; 0x07
     a84:	18 87       	std	Y+8, r17	; 0x08
     a86:	ce 1a       	sub	r12, r30
     a88:	df 0a       	sbc	r13, r31
     a8a:	dc 82       	std	Y+4, r13	; 0x04
     a8c:	cb 82       	std	Y+3, r12	; 0x03
     a8e:	1a 82       	std	Y+2, r1	; 0x02
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     a98:	28 96       	adiw	r28, 0x08	; 8
     a9a:	ea e0       	ldi	r30, 0x0A	; 10
     a9c:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__epilogue_restores__+0x10>

00000aa0 <__clzsi2>:
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	7b 01       	movw	r14, r22
     aaa:	8c 01       	movw	r16, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	e8 16       	cp	r14, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	f8 06       	cpc	r15, r24
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 07       	cpc	r16, r24
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	18 07       	cpc	r17, r24
     abc:	88 f4       	brcc	.+34     	; 0xae0 <__clzsi2+0x40>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	e8 16       	cp	r14, r24
     ac2:	f1 04       	cpc	r15, r1
     ac4:	01 05       	cpc	r16, r1
     ac6:	11 05       	cpc	r17, r1
     ac8:	31 f0       	breq	.+12     	; 0xad6 <__clzsi2+0x36>
     aca:	28 f0       	brcs	.+10     	; 0xad6 <__clzsi2+0x36>
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a0 e0       	ldi	r26, 0x00	; 0
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	17 c0       	rjmp	.+46     	; 0xb04 <__clzsi2+0x64>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	12 c0       	rjmp	.+36     	; 0xb04 <__clzsi2+0x64>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	e8 16       	cp	r14, r24
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	f8 06       	cpc	r15, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 07       	cpc	r16, r24
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	18 07       	cpc	r17, r24
     af0:	28 f0       	brcs	.+10     	; 0xafc <__clzsi2+0x5c>
     af2:	88 e1       	ldi	r24, 0x18	; 24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__clzsi2+0x64>
     afc:	80 e1       	ldi	r24, 0x10	; 16
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	20 e2       	ldi	r18, 0x20	; 32
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	28 1b       	sub	r18, r24
     b0e:	39 0b       	sbc	r19, r25
     b10:	4a 0b       	sbc	r20, r26
     b12:	5b 0b       	sbc	r21, r27
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__clzsi2+0x7e>
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__clzsi2+0x76>
     b22:	f7 01       	movw	r30, r14
     b24:	e8 59       	subi	r30, 0x98	; 152
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	80 81       	ld	r24, Z
     b2a:	28 1b       	sub	r18, r24
     b2c:	31 09       	sbc	r19, r1
     b2e:	41 09       	sbc	r20, r1
     b30:	51 09       	sbc	r21, r1
     b32:	c9 01       	movw	r24, r18
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <__pack_f>:
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	fc 01       	movw	r30, r24
     b4a:	e4 80       	ldd	r14, Z+4	; 0x04
     b4c:	f5 80       	ldd	r15, Z+5	; 0x05
     b4e:	06 81       	ldd	r16, Z+6	; 0x06
     b50:	17 81       	ldd	r17, Z+7	; 0x07
     b52:	d1 80       	ldd	r13, Z+1	; 0x01
     b54:	80 81       	ld	r24, Z
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	48 f4       	brcc	.+18     	; 0xb6c <__pack_f+0x2e>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e1       	ldi	r26, 0x10	; 16
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e8 2a       	or	r14, r24
     b64:	f9 2a       	or	r15, r25
     b66:	0a 2b       	or	r16, r26
     b68:	1b 2b       	or	r17, r27
     b6a:	a5 c0       	rjmp	.+330    	; 0xcb6 <__pack_f+0x178>
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	09 f4       	brne	.+2      	; 0xb72 <__pack_f+0x34>
     b70:	9f c0       	rjmp	.+318    	; 0xcb0 <__pack_f+0x172>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	21 f4       	brne	.+8      	; 0xb7e <__pack_f+0x40>
     b76:	ee 24       	eor	r14, r14
     b78:	ff 24       	eor	r15, r15
     b7a:	87 01       	movw	r16, r14
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <__pack_f+0x4a>
     b7e:	e1 14       	cp	r14, r1
     b80:	f1 04       	cpc	r15, r1
     b82:	01 05       	cpc	r16, r1
     b84:	11 05       	cpc	r17, r1
     b86:	19 f4       	brne	.+6      	; 0xb8e <__pack_f+0x50>
     b88:	e0 e0       	ldi	r30, 0x00	; 0
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	96 c0       	rjmp	.+300    	; 0xcba <__pack_f+0x17c>
     b8e:	62 81       	ldd	r22, Z+2	; 0x02
     b90:	73 81       	ldd	r23, Z+3	; 0x03
     b92:	9f ef       	ldi	r25, 0xFF	; 255
     b94:	62 38       	cpi	r22, 0x82	; 130
     b96:	79 07       	cpc	r23, r25
     b98:	0c f0       	brlt	.+2      	; 0xb9c <__pack_f+0x5e>
     b9a:	5b c0       	rjmp	.+182    	; 0xc52 <__pack_f+0x114>
     b9c:	22 e8       	ldi	r18, 0x82	; 130
     b9e:	3f ef       	ldi	r19, 0xFF	; 255
     ba0:	26 1b       	sub	r18, r22
     ba2:	37 0b       	sbc	r19, r23
     ba4:	2a 31       	cpi	r18, 0x1A	; 26
     ba6:	31 05       	cpc	r19, r1
     ba8:	2c f0       	brlt	.+10     	; 0xbb4 <__pack_f+0x76>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	2a c0       	rjmp	.+84     	; 0xc08 <__pack_f+0xca>
     bb4:	b8 01       	movw	r22, r16
     bb6:	a7 01       	movw	r20, r14
     bb8:	02 2e       	mov	r0, r18
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__pack_f+0x86>
     bbc:	76 95       	lsr	r23
     bbe:	67 95       	ror	r22
     bc0:	57 95       	ror	r21
     bc2:	47 95       	ror	r20
     bc4:	0a 94       	dec	r0
     bc6:	d2 f7       	brpl	.-12     	; 0xbbc <__pack_f+0x7e>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <__pack_f+0x9c>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	2a 95       	dec	r18
     bdc:	d2 f7       	brpl	.-12     	; 0xbd2 <__pack_f+0x94>
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	8e 21       	and	r24, r14
     be6:	9f 21       	and	r25, r15
     be8:	a0 23       	and	r26, r16
     bea:	b1 23       	and	r27, r17
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	21 f0       	breq	.+8      	; 0xbfc <__pack_f+0xbe>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	9a 01       	movw	r18, r20
     bfe:	ab 01       	movw	r20, r22
     c00:	28 2b       	or	r18, r24
     c02:	39 2b       	or	r19, r25
     c04:	4a 2b       	or	r20, r26
     c06:	5b 2b       	or	r21, r27
     c08:	da 01       	movw	r26, r20
     c0a:	c9 01       	movw	r24, r18
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	80 34       	cpi	r24, 0x40	; 64
     c16:	91 05       	cpc	r25, r1
     c18:	a1 05       	cpc	r26, r1
     c1a:	b1 05       	cpc	r27, r1
     c1c:	39 f4       	brne	.+14     	; 0xc2c <__pack_f+0xee>
     c1e:	27 ff       	sbrs	r18, 7
     c20:	09 c0       	rjmp	.+18     	; 0xc34 <__pack_f+0xf6>
     c22:	20 5c       	subi	r18, 0xC0	; 192
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	4f 4f       	sbci	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__pack_f+0xf6>
     c2c:	21 5c       	subi	r18, 0xC1	; 193
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	4f 4f       	sbci	r20, 0xFF	; 255
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	e0 e0       	ldi	r30, 0x00	; 0
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	20 30       	cpi	r18, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	3a 07       	cpc	r19, r26
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	4a 07       	cpc	r20, r26
     c42:	a0 e4       	ldi	r26, 0x40	; 64
     c44:	5a 07       	cpc	r21, r26
     c46:	10 f0       	brcs	.+4      	; 0xc4c <__pack_f+0x10e>
     c48:	e1 e0       	ldi	r30, 0x01	; 1
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	79 01       	movw	r14, r18
     c4e:	8a 01       	movw	r16, r20
     c50:	27 c0       	rjmp	.+78     	; 0xca0 <__pack_f+0x162>
     c52:	60 38       	cpi	r22, 0x80	; 128
     c54:	71 05       	cpc	r23, r1
     c56:	64 f5       	brge	.+88     	; 0xcb0 <__pack_f+0x172>
     c58:	fb 01       	movw	r30, r22
     c5a:	e1 58       	subi	r30, 0x81	; 129
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	d8 01       	movw	r26, r16
     c60:	c7 01       	movw	r24, r14
     c62:	8f 77       	andi	r24, 0x7F	; 127
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	a0 70       	andi	r26, 0x00	; 0
     c68:	b0 70       	andi	r27, 0x00	; 0
     c6a:	80 34       	cpi	r24, 0x40	; 64
     c6c:	91 05       	cpc	r25, r1
     c6e:	a1 05       	cpc	r26, r1
     c70:	b1 05       	cpc	r27, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <__pack_f+0x144>
     c74:	e7 fe       	sbrs	r14, 7
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <__pack_f+0x154>
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__pack_f+0x14c>
     c82:	8f e3       	ldi	r24, 0x3F	; 63
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e8 0e       	add	r14, r24
     c8c:	f9 1e       	adc	r15, r25
     c8e:	0a 1f       	adc	r16, r26
     c90:	1b 1f       	adc	r17, r27
     c92:	17 ff       	sbrs	r17, 7
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <__pack_f+0x162>
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	16 95       	lsr	r17
     ca4:	07 95       	ror	r16
     ca6:	f7 94       	ror	r15
     ca8:	e7 94       	ror	r14
     caa:	8a 95       	dec	r24
     cac:	d1 f7       	brne	.-12     	; 0xca2 <__pack_f+0x164>
     cae:	05 c0       	rjmp	.+10     	; 0xcba <__pack_f+0x17c>
     cb0:	ee 24       	eor	r14, r14
     cb2:	ff 24       	eor	r15, r15
     cb4:	87 01       	movw	r16, r14
     cb6:	ef ef       	ldi	r30, 0xFF	; 255
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	6e 2f       	mov	r22, r30
     cbc:	67 95       	ror	r22
     cbe:	66 27       	eor	r22, r22
     cc0:	67 95       	ror	r22
     cc2:	90 2f       	mov	r25, r16
     cc4:	9f 77       	andi	r25, 0x7F	; 127
     cc6:	d7 94       	ror	r13
     cc8:	dd 24       	eor	r13, r13
     cca:	d7 94       	ror	r13
     ccc:	8e 2f       	mov	r24, r30
     cce:	86 95       	lsr	r24
     cd0:	49 2f       	mov	r20, r25
     cd2:	46 2b       	or	r20, r22
     cd4:	58 2f       	mov	r21, r24
     cd6:	5d 29       	or	r21, r13
     cd8:	b7 01       	movw	r22, r14
     cda:	ca 01       	movw	r24, r20
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	08 95       	ret

00000ce8 <__unpack_f>:
     ce8:	fc 01       	movw	r30, r24
     cea:	db 01       	movw	r26, r22
     cec:	40 81       	ld	r20, Z
     cee:	51 81       	ldd	r21, Z+1	; 0x01
     cf0:	22 81       	ldd	r18, Z+2	; 0x02
     cf2:	62 2f       	mov	r22, r18
     cf4:	6f 77       	andi	r22, 0x7F	; 127
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	22 1f       	adc	r18, r18
     cfa:	22 27       	eor	r18, r18
     cfc:	22 1f       	adc	r18, r18
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	89 2f       	mov	r24, r25
     d02:	88 0f       	add	r24, r24
     d04:	82 2b       	or	r24, r18
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	99 1f       	adc	r25, r25
     d0c:	99 27       	eor	r25, r25
     d0e:	99 1f       	adc	r25, r25
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	9c 93       	st	X, r25
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	21 15       	cp	r18, r1
     d18:	31 05       	cpc	r19, r1
     d1a:	a9 f5       	brne	.+106    	; 0xd86 <__unpack_f+0x9e>
     d1c:	41 15       	cp	r20, r1
     d1e:	51 05       	cpc	r21, r1
     d20:	61 05       	cpc	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	11 f4       	brne	.+4      	; 0xd2a <__unpack_f+0x42>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	37 c0       	rjmp	.+110    	; 0xd98 <__unpack_f+0xb0>
     d2a:	82 e8       	ldi	r24, 0x82	; 130
     d2c:	9f ef       	ldi	r25, 0xFF	; 255
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	9a 01       	movw	r18, r20
     d38:	ab 01       	movw	r20, r22
     d3a:	67 e0       	ldi	r22, 0x07	; 7
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	6a 95       	dec	r22
     d46:	d1 f7       	brne	.-12     	; 0xd3c <__unpack_f+0x54>
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	8c 93       	st	X, r24
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__unpack_f+0x80>
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	44 1f       	adc	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	12 96       	adiw	r26, 0x02	; 2
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	9c 93       	st	X, r25
     d64:	8e 93       	st	-X, r24
     d66:	12 97       	sbiw	r26, 0x02	; 2
     d68:	20 30       	cpi	r18, 0x00	; 0
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	38 07       	cpc	r19, r24
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	48 07       	cpc	r20, r24
     d72:	80 e4       	ldi	r24, 0x40	; 64
     d74:	58 07       	cpc	r21, r24
     d76:	58 f3       	brcs	.-42     	; 0xd4e <__unpack_f+0x66>
     d78:	14 96       	adiw	r26, 0x04	; 4
     d7a:	2d 93       	st	X+, r18
     d7c:	3d 93       	st	X+, r19
     d7e:	4d 93       	st	X+, r20
     d80:	5c 93       	st	X, r21
     d82:	17 97       	sbiw	r26, 0x07	; 7
     d84:	08 95       	ret
     d86:	2f 3f       	cpi	r18, 0xFF	; 255
     d88:	31 05       	cpc	r19, r1
     d8a:	79 f4       	brne	.+30     	; 0xdaa <__unpack_f+0xc2>
     d8c:	41 15       	cp	r20, r1
     d8e:	51 05       	cpc	r21, r1
     d90:	61 05       	cpc	r22, r1
     d92:	71 05       	cpc	r23, r1
     d94:	19 f4       	brne	.+6      	; 0xd9c <__unpack_f+0xb4>
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	8c 93       	st	X, r24
     d9a:	08 95       	ret
     d9c:	64 ff       	sbrs	r22, 4
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <__unpack_f+0xbe>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
     da4:	12 c0       	rjmp	.+36     	; 0xdca <__unpack_f+0xe2>
     da6:	1c 92       	st	X, r1
     da8:	10 c0       	rjmp	.+32     	; 0xdca <__unpack_f+0xe2>
     daa:	2f 57       	subi	r18, 0x7F	; 127
     dac:	30 40       	sbci	r19, 0x00	; 0
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	3c 93       	st	X, r19
     db2:	2e 93       	st	-X, r18
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	8c 93       	st	X, r24
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	44 0f       	add	r20, r20
     dbe:	55 1f       	adc	r21, r21
     dc0:	66 1f       	adc	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	8a 95       	dec	r24
     dc6:	d1 f7       	brne	.-12     	; 0xdbc <__unpack_f+0xd4>
     dc8:	70 64       	ori	r23, 0x40	; 64
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	4d 93       	st	X+, r20
     dce:	5d 93       	st	X+, r21
     dd0:	6d 93       	st	X+, r22
     dd2:	7c 93       	st	X, r23
     dd4:	17 97       	sbiw	r26, 0x07	; 7
     dd6:	08 95       	ret

00000dd8 <__fpcmp_parts_f>:
     dd8:	1f 93       	push	r17
     dda:	dc 01       	movw	r26, r24
     ddc:	fb 01       	movw	r30, r22
     dde:	9c 91       	ld	r25, X
     de0:	92 30       	cpi	r25, 0x02	; 2
     de2:	08 f4       	brcc	.+2      	; 0xde6 <__fpcmp_parts_f+0xe>
     de4:	47 c0       	rjmp	.+142    	; 0xe74 <__fpcmp_parts_f+0x9c>
     de6:	80 81       	ld	r24, Z
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	08 f4       	brcc	.+2      	; 0xdee <__fpcmp_parts_f+0x16>
     dec:	43 c0       	rjmp	.+134    	; 0xe74 <__fpcmp_parts_f+0x9c>
     dee:	94 30       	cpi	r25, 0x04	; 4
     df0:	51 f4       	brne	.+20     	; 0xe06 <__fpcmp_parts_f+0x2e>
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	1c 91       	ld	r17, X
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	99 f5       	brne	.+102    	; 0xe60 <__fpcmp_parts_f+0x88>
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	68 2f       	mov	r22, r24
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	61 1b       	sub	r22, r17
     e02:	71 09       	sbc	r23, r1
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <__fpcmp_parts_f+0xac>
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	21 f0       	breq	.+8      	; 0xe12 <__fpcmp_parts_f+0x3a>
     e0a:	92 30       	cpi	r25, 0x02	; 2
     e0c:	31 f4       	brne	.+12     	; 0xe1a <__fpcmp_parts_f+0x42>
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	b9 f1       	breq	.+110    	; 0xe80 <__fpcmp_parts_f+0xa8>
     e12:	81 81       	ldd	r24, Z+1	; 0x01
     e14:	88 23       	and	r24, r24
     e16:	89 f1       	breq	.+98     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e18:	2d c0       	rjmp	.+90     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	1c 91       	ld	r17, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	f1 f0       	breq	.+60     	; 0xe60 <__fpcmp_parts_f+0x88>
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	18 17       	cp	r17, r24
     e28:	d9 f4       	brne	.+54     	; 0xe60 <__fpcmp_parts_f+0x88>
     e2a:	12 96       	adiw	r26, 0x02	; 2
     e2c:	2d 91       	ld	r18, X+
     e2e:	3c 91       	ld	r19, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	94 f0       	brlt	.+36     	; 0xe60 <__fpcmp_parts_f+0x88>
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	bc f0       	brlt	.+46     	; 0xe70 <__fpcmp_parts_f+0x98>
     e42:	14 96       	adiw	r26, 0x04	; 4
     e44:	8d 91       	ld	r24, X+
     e46:	9d 91       	ld	r25, X+
     e48:	0d 90       	ld	r0, X+
     e4a:	bc 91       	ld	r27, X
     e4c:	a0 2d       	mov	r26, r0
     e4e:	24 81       	ldd	r18, Z+4	; 0x04
     e50:	35 81       	ldd	r19, Z+5	; 0x05
     e52:	46 81       	ldd	r20, Z+6	; 0x06
     e54:	57 81       	ldd	r21, Z+7	; 0x07
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	4a 07       	cpc	r20, r26
     e5c:	5b 07       	cpc	r21, r27
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <__fpcmp_parts_f+0x8e>
     e60:	11 23       	and	r17, r17
     e62:	41 f0       	breq	.+16     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e64:	0a c0       	rjmp	.+20     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e66:	82 17       	cp	r24, r18
     e68:	93 07       	cpc	r25, r19
     e6a:	a4 07       	cpc	r26, r20
     e6c:	b5 07       	cpc	r27, r21
     e6e:	40 f4       	brcc	.+16     	; 0xe80 <__fpcmp_parts_f+0xa8>
     e70:	11 23       	and	r17, r17
     e72:	19 f0       	breq	.+6      	; 0xe7a <__fpcmp_parts_f+0xa2>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <__fpcmp_parts_f+0xac>
     e7a:	6f ef       	ldi	r22, 0xFF	; 255
     e7c:	7f ef       	ldi	r23, 0xFF	; 255
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <__fpcmp_parts_f+0xac>
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	cb 01       	movw	r24, r22
     e86:	1f 91       	pop	r17
     e88:	08 95       	ret

00000e8a <MCAL_Void_Timer0_Init>:

#include  "TIMER.h"
#include <math.h>

void MCAL_Void_Timer0_Init()
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
 TCCR0 =0x00;                                            // normal mode
     e92:	e3 e5       	ldi	r30, 0x53	; 83
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	10 82       	st	Z, r1
 TCNT0 =0X00;                                            // initial timer
     e98:	e2 e5       	ldi	r30, 0x52	; 82
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	10 82       	st	Z, r1
 TCCR0 |= (1<<0) | (1<<2);
     e9e:	a3 e5       	ldi	r26, 0x53	; 83
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e3 e5       	ldi	r30, 0x53	; 83
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	85 60       	ori	r24, 0x05	; 5
     eaa:	8c 93       	st	X, r24

}
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <MCAL_Void_Timer0_delay>:

void MCAL_Void_Timer0_delay(int Copy_U32_TimeDelay)
{
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	66 97       	sbiw	r28, 0x16	; 22
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	9e 8b       	std	Y+22, r25	; 0x16
     ed0:	8d 8b       	std	Y+21, r24	; 0x15
	u32 LocaL_U32_OverflowCounter=0;
     ed2:	19 8a       	std	Y+17, r1	; 0x11
     ed4:	1a 8a       	std	Y+18, r1	; 0x12
     ed6:	1b 8a       	std	Y+19, r1	; 0x13
     ed8:	1c 8a       	std	Y+20, r1	; 0x14
    u32  LocaL_U32_NumberOfOverflows;
    d64 Local_d64_TimeMaxDelay , Local_d64_TimeTick;
    s32 Local_U32_InitialTimerValue;
Local_d64_TimeTick = 1024.0 / 1000.0; // milLi second
     eda:	8f e6       	ldi	r24, 0x6F	; 111
     edc:	92 e1       	ldi	r25, 0x12	; 18
     ede:	a3 e8       	ldi	r26, 0x83	; 131
     ee0:	bf e3       	ldi	r27, 0x3F	; 63
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	9e 83       	std	Y+6, r25	; 0x06
     ee6:	af 83       	std	Y+7, r26	; 0x07
     ee8:	b8 87       	std	Y+8, r27	; 0x08
Local_d64_TimeMaxDelay = Local_d64_TimeTick * 256; // milli seconds
     eea:	6d 81       	ldd	r22, Y+5	; 0x05
     eec:	7e 81       	ldd	r23, Y+6	; 0x06
     eee:	8f 81       	ldd	r24, Y+7	; 0x07
     ef0:	98 85       	ldd	r25, Y+8	; 0x08
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e8       	ldi	r20, 0x80	; 128
     ef8:	53 e4       	ldi	r21, 0x43	; 67
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	89 87       	std	Y+9, r24	; 0x09
     f04:	9a 87       	std	Y+10, r25	; 0x0a
     f06:	ab 87       	std	Y+11, r26	; 0x0b
     f08:	bc 87       	std	Y+12, r27	; 0x0c
if(Copy_U32_TimeDelay<Local_d64_TimeMaxDelay)                                             //case 1
     f0a:	8d 89       	ldd	r24, Y+21	; 0x15
     f0c:	9e 89       	ldd	r25, Y+22	; 0x16
     f0e:	aa 27       	eor	r26, r26
     f10:	97 fd       	sbrc	r25, 7
     f12:	a0 95       	com	r26
     f14:	ba 2f       	mov	r27, r26
     f16:	bc 01       	movw	r22, r24
     f18:	cd 01       	movw	r24, r26
     f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	bc 01       	movw	r22, r24
     f24:	cd 01       	movw	r24, r26
     f26:	29 85       	ldd	r18, Y+9	; 0x09
     f28:	3a 85       	ldd	r19, Y+10	; 0x0a
     f2a:	4b 85       	ldd	r20, Y+11	; 0x0b
     f2c:	5c 85       	ldd	r21, Y+12	; 0x0c
     f2e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__ltsf2>
     f32:	88 23       	and	r24, r24
     f34:	8c f5       	brge	.+98     	; 0xf98 <MCAL_Void_Timer0_delay+0xe6>
{
	Local_U32_InitialTimerValue = (Local_d64_TimeMaxDelay - Copy_U32_TimeDelay)/Local_d64_TimeTick;
     f36:	8d 89       	ldd	r24, Y+21	; 0x15
     f38:	9e 89       	ldd	r25, Y+22	; 0x16
     f3a:	aa 27       	eor	r26, r26
     f3c:	97 fd       	sbrc	r25, 7
     f3e:	a0 95       	com	r26
     f40:	ba 2f       	mov	r27, r26
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
     f4a:	9b 01       	movw	r18, r22
     f4c:	ac 01       	movw	r20, r24
     f4e:	69 85       	ldd	r22, Y+9	; 0x09
     f50:	7a 85       	ldd	r23, Y+10	; 0x0a
     f52:	8b 85       	ldd	r24, Y+11	; 0x0b
     f54:	9c 85       	ldd	r25, Y+12	; 0x0c
     f56:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	2d 81       	ldd	r18, Y+5	; 0x05
     f64:	3e 81       	ldd	r19, Y+6	; 0x06
     f66:	4f 81       	ldd	r20, Y+7	; 0x07
     f68:	58 85       	ldd	r21, Y+8	; 0x08
     f6a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	bc 01       	movw	r22, r24
     f74:	cd 01       	movw	r24, r26
     f76:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	ab 83       	std	Y+3, r26	; 0x03
     f84:	bc 83       	std	Y+4, r27	; 0x04
	LocaL_U32_NumberOfOverflows = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	8d 87       	std	Y+13, r24	; 0x0d
     f90:	9e 87       	std	Y+14, r25	; 0x0e
     f92:	af 87       	std	Y+15, r26	; 0x0f
     f94:	b8 8b       	std	Y+16, r27	; 0x10
     f96:	9d c0       	rjmp	.+314    	; 0x10d2 <MCAL_Void_Timer0_delay+0x220>
}
else if(Copy_U32_TimeDelay == (s32)Local_d64_TimeMaxDelay)                                 //case 2
     f98:	8d 89       	ldd	r24, Y+21	; 0x15
     f9a:	9e 89       	ldd	r25, Y+22	; 0x16
     f9c:	7c 01       	movw	r14, r24
     f9e:	00 27       	eor	r16, r16
     fa0:	f7 fc       	sbrc	r15, 7
     fa2:	00 95       	com	r16
     fa4:	10 2f       	mov	r17, r16
     fa6:	69 85       	ldd	r22, Y+9	; 0x09
     fa8:	7a 85       	ldd	r23, Y+10	; 0x0a
     faa:	8b 85       	ldd	r24, Y+11	; 0x0b
     fac:	9c 85       	ldd	r25, Y+12	; 0x0c
     fae:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	e8 16       	cp	r14, r24
     fb8:	f9 06       	cpc	r15, r25
     fba:	0a 07       	cpc	r16, r26
     fbc:	1b 07       	cpc	r17, r27
     fbe:	69 f4       	brne	.+26     	; 0xfda <MCAL_Void_Timer0_delay+0x128>
{
	Local_U32_InitialTimerValue=0;
     fc0:	19 82       	std	Y+1, r1	; 0x01
     fc2:	1a 82       	std	Y+2, r1	; 0x02
     fc4:	1b 82       	std	Y+3, r1	; 0x03
     fc6:	1c 82       	std	Y+4, r1	; 0x04
	LocaL_U32_NumberOfOverflows=1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a0 e0       	ldi	r26, 0x00	; 0
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	8d 87       	std	Y+13, r24	; 0x0d
     fd2:	9e 87       	std	Y+14, r25	; 0x0e
     fd4:	af 87       	std	Y+15, r26	; 0x0f
     fd6:	b8 8b       	std	Y+16, r27	; 0x10
     fd8:	7c c0       	rjmp	.+248    	; 0x10d2 <MCAL_Void_Timer0_delay+0x220>
}

else                                                                                       //case 3
{
	LocaL_U32_NumberOfOverflows = ceil((d64)Copy_U32_TimeDelay/Local_d64_TimeMaxDelay);
     fda:	8d 89       	ldd	r24, Y+21	; 0x15
     fdc:	9e 89       	ldd	r25, Y+22	; 0x16
     fde:	aa 27       	eor	r26, r26
     fe0:	97 fd       	sbrc	r25, 7
     fe2:	a0 95       	com	r26
     fe4:	ba 2f       	mov	r27, r26
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	29 85       	ldd	r18, Y+9	; 0x09
     ff8:	3a 85       	ldd	r19, Y+10	; 0x0a
     ffa:	4b 85       	ldd	r20, Y+11	; 0x0b
     ffc:	5c 85       	ldd	r21, Y+12	; 0x0c
     ffe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	bc 01       	movw	r22, r24
    1008:	cd 01       	movw	r24, r26
    100a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <ceil>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	8d 87       	std	Y+13, r24	; 0x0d
    1020:	9e 87       	std	Y+14, r25	; 0x0e
    1022:	af 87       	std	Y+15, r26	; 0x0f
    1024:	b8 8b       	std	Y+16, r27	; 0x10
	Local_U32_InitialTimerValue = 256 -(d64)(Copy_U32_TimeDelay/Local_d64_TimeTick)/LocaL_U32_NumberOfOverflows;
    1026:	8d 89       	ldd	r24, Y+21	; 0x15
    1028:	9e 89       	ldd	r25, Y+22	; 0x16
    102a:	aa 27       	eor	r26, r26
    102c:	97 fd       	sbrc	r25, 7
    102e:	a0 95       	com	r26
    1030:	ba 2f       	mov	r27, r26
    1032:	bc 01       	movw	r22, r24
    1034:	cd 01       	movw	r24, r26
    1036:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	bc 01       	movw	r22, r24
    1040:	cd 01       	movw	r24, r26
    1042:	2d 81       	ldd	r18, Y+5	; 0x05
    1044:	3e 81       	ldd	r19, Y+6	; 0x06
    1046:	4f 81       	ldd	r20, Y+7	; 0x07
    1048:	58 85       	ldd	r21, Y+8	; 0x08
    104a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	7c 01       	movw	r14, r24
    1054:	8d 01       	movw	r16, r26
    1056:	6d 85       	ldd	r22, Y+13	; 0x0d
    1058:	7e 85       	ldd	r23, Y+14	; 0x0e
    105a:	8f 85       	ldd	r24, Y+15	; 0x0f
    105c:	98 89       	ldd	r25, Y+16	; 0x10
    105e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    1062:	9b 01       	movw	r18, r22
    1064:	ac 01       	movw	r20, r24
    1066:	c8 01       	movw	r24, r16
    1068:	b7 01       	movw	r22, r14
    106a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9c 01       	movw	r18, r24
    1074:	ad 01       	movw	r20, r26
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	80 e8       	ldi	r24, 0x80	; 128
    107c:	93 e4       	ldi	r25, 0x43	; 67
    107e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	ab 83       	std	Y+3, r26	; 0x03
    1098:	bc 83       	std	Y+4, r27	; 0x04
    109a:	1b c0       	rjmp	.+54     	; 0x10d2 <MCAL_Void_Timer0_delay+0x220>
}
while (LocaL_U32_OverflowCounter < LocaL_U32_NumberOfOverflows)                             //busy
{
		while (( TIFR & (1<<0) )==0 )
    109c:	e8 e5       	ldi	r30, 0x58	; 88
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	81 70       	andi	r24, 0x01	; 1
    10a8:	90 70       	andi	r25, 0x00	; 0
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	b9 f3       	breq	.-18     	; 0x109c <MCAL_Void_Timer0_delay+0x1ea>
		{
			//waiting for the flag
		}
	          	TIFR |= (1<<0);
    10ae:	a8 e5       	ldi	r26, 0x58	; 88
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e8 e5       	ldi	r30, 0x58	; 88
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	8c 93       	st	X, r24
	          	LocaL_U32_OverflowCounter++;
    10bc:	89 89       	ldd	r24, Y+17	; 0x11
    10be:	9a 89       	ldd	r25, Y+18	; 0x12
    10c0:	ab 89       	ldd	r26, Y+19	; 0x13
    10c2:	bc 89       	ldd	r27, Y+20	; 0x14
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	a1 1d       	adc	r26, r1
    10c8:	b1 1d       	adc	r27, r1
    10ca:	89 8b       	std	Y+17, r24	; 0x11
    10cc:	9a 8b       	std	Y+18, r25	; 0x12
    10ce:	ab 8b       	std	Y+19, r26	; 0x13
    10d0:	bc 8b       	std	Y+20, r27	; 0x14
else                                                                                       //case 3
{
	LocaL_U32_NumberOfOverflows = ceil((d64)Copy_U32_TimeDelay/Local_d64_TimeMaxDelay);
	Local_U32_InitialTimerValue = 256 -(d64)(Copy_U32_TimeDelay/Local_d64_TimeTick)/LocaL_U32_NumberOfOverflows;
}
while (LocaL_U32_OverflowCounter < LocaL_U32_NumberOfOverflows)                             //busy
    10d2:	29 89       	ldd	r18, Y+17	; 0x11
    10d4:	3a 89       	ldd	r19, Y+18	; 0x12
    10d6:	4b 89       	ldd	r20, Y+19	; 0x13
    10d8:	5c 89       	ldd	r21, Y+20	; 0x14
    10da:	8d 85       	ldd	r24, Y+13	; 0x0d
    10dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10de:	af 85       	ldd	r26, Y+15	; 0x0f
    10e0:	b8 89       	ldd	r27, Y+16	; 0x10
    10e2:	28 17       	cp	r18, r24
    10e4:	39 07       	cpc	r19, r25
    10e6:	4a 07       	cpc	r20, r26
    10e8:	5b 07       	cpc	r21, r27
    10ea:	c0 f2       	brcs	.-80     	; 0x109c <MCAL_Void_Timer0_delay+0x1ea>
			//waiting for the flag
		}
	          	TIFR |= (1<<0);
	          	LocaL_U32_OverflowCounter++;
	}
LocaL_U32_OverflowCounter =0;
    10ec:	19 8a       	std	Y+17, r1	; 0x11
    10ee:	1a 8a       	std	Y+18, r1	; 0x12
    10f0:	1b 8a       	std	Y+19, r1	; 0x13
    10f2:	1c 8a       	std	Y+20, r1	; 0x14
}
    10f4:	66 96       	adiw	r28, 0x16	; 22
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	08 95       	ret

0000110e <MCAL_Void_Interrupt0_init>:

#include "INTERRUPT.h"


void MCAL_Void_Interrupt0_init()
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
	sei();                                         // enable global interrupt
    1116:	78 94       	sei
	MCUCR_REG |=(1<<ISC00_BIT) | (1<<ISC01_BIT);   // choosing external interrupt
    1118:	a5 e5       	ldi	r26, 0x55	; 85
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e5       	ldi	r30, 0x55	; 85
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	83 60       	ori	r24, 0x03	; 3
    1124:	8c 93       	st	X, r24
	GICR_REG |=(1<<INT0_BIT);                      // enable external interrupt 0
    1126:	ab e5       	ldi	r26, 0x5B	; 91
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	eb e5       	ldi	r30, 0x5B	; 91
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	80 64       	ori	r24, 0x40	; 64
    1132:	8c 93       	st	X, r24
}
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <DIO_Void_SetPinDirection>:
 *      Author: norat
 */
#include "DIO.h"

void DIO_Void_SetPinDirection(u8 Copy_U8_PortNumber, u8 Copy_U8_pinNumber, u8 Copy_U8_State)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_Void_SetPinDirection+0x6>
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_Void_SetPinDirection+0x8>
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	6a 83       	std	Y+2, r22	; 0x02
    114c:	4b 83       	std	Y+3, r20	; 0x03
		/* Setup the pin direction */
		switch(Copy_U8_PortNumber)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3d 83       	std	Y+5, r19	; 0x05
    1156:	2c 83       	std	Y+4, r18	; 0x04
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_Void_SetPinDirection+0x2a>
    1162:	43 c0       	rjmp	.+134    	; 0x11ea <DIO_Void_SetPinDirection+0xb0>
    1164:	2c 81       	ldd	r18, Y+4	; 0x04
    1166:	3d 81       	ldd	r19, Y+5	; 0x05
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	2c f4       	brge	.+10     	; 0x1178 <DIO_Void_SetPinDirection+0x3e>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	71 f0       	breq	.+28     	; 0x1192 <DIO_Void_SetPinDirection+0x58>
    1176:	bc c0       	rjmp	.+376    	; 0x12f0 <DIO_Void_SetPinDirection+0x1b6>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_Void_SetPinDirection+0x4a>
    1182:	5f c0       	rjmp	.+190    	; 0x1242 <DIO_Void_SetPinDirection+0x108>
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	9d 81       	ldd	r25, Y+5	; 0x05
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	91 05       	cpc	r25, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <DIO_Void_SetPinDirection+0x56>
    118e:	85 c0       	rjmp	.+266    	; 0x129a <DIO_Void_SetPinDirection+0x160>
    1190:	af c0       	rjmp	.+350    	; 0x12f0 <DIO_Void_SetPinDirection+0x1b6>
		{
		case PORTA_REG:
			if(Copy_U8_State == OUTPUT)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	a1 f4       	brne	.+40     	; 0x11c0 <DIO_Void_SetPinDirection+0x86>
			{
				SET_BIT(DDRA,Copy_U8_pinNumber);
    1198:	aa e3       	ldi	r26, 0x3A	; 58
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ea e3       	ldi	r30, 0x3A	; 58
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_Void_SetPinDirection+0x7c>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_Void_SetPinDirection+0x78>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	98 c0       	rjmp	.+304    	; 0x12f0 <DIO_Void_SetPinDirection+0x1b6>
			}
			else
			{
				CLR_BIT(DDRA,Copy_U8_pinNumber);
    11c0:	aa e3       	ldi	r26, 0x3A	; 58
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ea e3       	ldi	r30, 0x3A	; 58
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_Void_SetPinDirection+0xa4>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_Void_SetPinDirection+0xa0>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	83 c0       	rjmp	.+262    	; 0x12f0 <DIO_Void_SetPinDirection+0x1b6>
			}
			break;
		case PORTB_REG:
			if(Copy_U8_State == OUTPUT)
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	a1 f4       	brne	.+40     	; 0x1218 <DIO_Void_SetPinDirection+0xde>
			{
				SET_BIT(DDRB,Copy_U8_pinNumber);
    11f0:	a7 e3       	ldi	r26, 0x37	; 55
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e7 e3       	ldi	r30, 0x37	; 55
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_Void_SetPinDirection+0xd4>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_Void_SetPinDirection+0xd0>
    1212:	84 2b       	or	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	6c c0       	rjmp	.+216    	; 0x12f0 <DIO_Void_SetPinDirection+0x1b6>
			}
			else
			{
				CLR_BIT(DDRB,Copy_U8_pinNumber);
    1218:	a7 e3       	ldi	r26, 0x37	; 55
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e7 e3       	ldi	r30, 0x37	; 55
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_Void_SetPinDirection+0xfc>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_Void_SetPinDirection+0xf8>
    123a:	80 95       	com	r24
    123c:	84 23       	and	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	57 c0       	rjmp	.+174    	; 0x12f0 <DIO_Void_SetPinDirection+0x1b6>
			}
			break;
		case PORTC_REG:
			if(Copy_U8_State == OUTPUT)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	a1 f4       	brne	.+40     	; 0x1270 <DIO_Void_SetPinDirection+0x136>
			{
				SET_BIT(DDRC,Copy_U8_pinNumber);
    1248:	a4 e3       	ldi	r26, 0x34	; 52
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e4 e3       	ldi	r30, 0x34	; 52
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_Void_SetPinDirection+0x12c>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_Void_SetPinDirection+0x128>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	40 c0       	rjmp	.+128    	; 0x12f0 <DIO_Void_SetPinDirection+0x1b6>
			}
			else
			{
				CLR_BIT(DDRC,Copy_U8_pinNumber);
    1270:	a4 e3       	ldi	r26, 0x34	; 52
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e4 e3       	ldi	r30, 0x34	; 52
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO_Void_SetPinDirection+0x154>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO_Void_SetPinDirection+0x150>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	2b c0       	rjmp	.+86     	; 0x12f0 <DIO_Void_SetPinDirection+0x1b6>
			}
			break;
		case PORTD_REG:
			if(Copy_U8_State == OUTPUT)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	a1 f4       	brne	.+40     	; 0x12c8 <DIO_Void_SetPinDirection+0x18e>
			{
				SET_BIT(DDRD,Copy_U8_pinNumber);
    12a0:	a1 e3       	ldi	r26, 0x31	; 49
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e1 e3       	ldi	r30, 0x31	; 49
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_Void_SetPinDirection+0x184>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_Void_SetPinDirection+0x180>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	14 c0       	rjmp	.+40     	; 0x12f0 <DIO_Void_SetPinDirection+0x1b6>
			}
			else
			{
				CLR_BIT(DDRD,Copy_U8_pinNumber);
    12c8:	a1 e3       	ldi	r26, 0x31	; 49
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e1 e3       	ldi	r30, 0x31	; 49
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_Void_SetPinDirection+0x1ac>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_Void_SetPinDirection+0x1a8>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
			}
			break;
		}
	}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <DIO_Void_SetPinValue>:

void DIO_Void_SetPinValue(u8 Copy_U8_PortNumber, u8 Copy_U8_pinNumber, u8 Copy_U8_Value)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <DIO_Void_SetPinValue+0x6>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_Void_SetPinValue+0x8>
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	6a 83       	std	Y+2, r22	; 0x02
    1312:	4b 83       	std	Y+3, r20	; 0x03
			/* Setup the pin direction */
			switch(Copy_U8_PortNumber)
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3d 83       	std	Y+5, r19	; 0x05
    131c:	2c 83       	std	Y+4, r18	; 0x04
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <DIO_Void_SetPinValue+0x2a>
    1328:	43 c0       	rjmp	.+134    	; 0x13b0 <DIO_Void_SetPinValue+0xb0>
    132a:	2c 81       	ldd	r18, Y+4	; 0x04
    132c:	3d 81       	ldd	r19, Y+5	; 0x05
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <DIO_Void_SetPinValue+0x3e>
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	71 f0       	breq	.+28     	; 0x1358 <DIO_Void_SetPinValue+0x58>
    133c:	bc c0       	rjmp	.+376    	; 0x14b6 <DIO_Void_SetPinValue+0x1b6>
    133e:	2c 81       	ldd	r18, Y+4	; 0x04
    1340:	3d 81       	ldd	r19, Y+5	; 0x05
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <DIO_Void_SetPinValue+0x4a>
    1348:	5f c0       	rjmp	.+190    	; 0x1408 <DIO_Void_SetPinValue+0x108>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <DIO_Void_SetPinValue+0x56>
    1354:	85 c0       	rjmp	.+266    	; 0x1460 <DIO_Void_SetPinValue+0x160>
    1356:	af c0       	rjmp	.+350    	; 0x14b6 <DIO_Void_SetPinValue+0x1b6>
			{
			case PORTA_REG:
				if(Copy_U8_Value == OUTPUT)
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	a1 f4       	brne	.+40     	; 0x1386 <DIO_Void_SetPinValue+0x86>
				{
					SET_BIT(PORTA,Copy_U8_pinNumber);
    135e:	ab e3       	ldi	r26, 0x3B	; 59
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	eb e3       	ldi	r30, 0x3B	; 59
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_Void_SetPinValue+0x7c>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_Void_SetPinValue+0x78>
    1380:	84 2b       	or	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	98 c0       	rjmp	.+304    	; 0x14b6 <DIO_Void_SetPinValue+0x1b6>
				}
				else
				{
					CLR_BIT(PORTA,Copy_U8_pinNumber);
    1386:	ab e3       	ldi	r26, 0x3B	; 59
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	eb e3       	ldi	r30, 0x3B	; 59
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_Void_SetPinValue+0xa4>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_Void_SetPinValue+0xa0>
    13a8:	80 95       	com	r24
    13aa:	84 23       	and	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	83 c0       	rjmp	.+262    	; 0x14b6 <DIO_Void_SetPinValue+0x1b6>
				}
				break;
			case PORTB_REG:
				if(Copy_U8_Value == OUTPUT)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	a1 f4       	brne	.+40     	; 0x13de <DIO_Void_SetPinValue+0xde>
				{
					SET_BIT(PORTB,Copy_U8_pinNumber);
    13b6:	a8 e3       	ldi	r26, 0x38	; 56
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e8 e3       	ldi	r30, 0x38	; 56
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_Void_SetPinValue+0xd4>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_Void_SetPinValue+0xd0>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	6c c0       	rjmp	.+216    	; 0x14b6 <DIO_Void_SetPinValue+0x1b6>
				}
				else
				{
					CLR_BIT(PORTB,Copy_U8_pinNumber);
    13de:	a8 e3       	ldi	r26, 0x38	; 56
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e8 e3       	ldi	r30, 0x38	; 56
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_Void_SetPinValue+0xfc>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_Void_SetPinValue+0xf8>
    1400:	80 95       	com	r24
    1402:	84 23       	and	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	57 c0       	rjmp	.+174    	; 0x14b6 <DIO_Void_SetPinValue+0x1b6>
				}
				break;
			case PORTC_REG:
				if(Copy_U8_Value == OUTPUT)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	a1 f4       	brne	.+40     	; 0x1436 <DIO_Void_SetPinValue+0x136>
				{
					SET_BIT(PORTC,Copy_U8_pinNumber);
    140e:	a5 e3       	ldi	r26, 0x35	; 53
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_Void_SetPinValue+0x12c>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_Void_SetPinValue+0x128>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	40 c0       	rjmp	.+128    	; 0x14b6 <DIO_Void_SetPinValue+0x1b6>
				}
				else
				{
					CLR_BIT(PORTC,Copy_U8_pinNumber);
    1436:	a5 e3       	ldi	r26, 0x35	; 53
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e5 e3       	ldi	r30, 0x35	; 53
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_Void_SetPinValue+0x154>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_Void_SetPinValue+0x150>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	2b c0       	rjmp	.+86     	; 0x14b6 <DIO_Void_SetPinValue+0x1b6>
				}
				break;
			case PORTD_REG:
				if(Copy_U8_Value == OUTPUT)
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	a1 f4       	brne	.+40     	; 0x148e <DIO_Void_SetPinValue+0x18e>
				{
					SET_BIT(PORTD,Copy_U8_pinNumber);
    1466:	a2 e3       	ldi	r26, 0x32	; 50
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_Void_SetPinValue+0x184>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_Void_SetPinValue+0x180>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <DIO_Void_SetPinValue+0x1b6>
				}
				else
				{
					CLR_BIT(PORTD,Copy_U8_pinNumber);
    148e:	a2 e3       	ldi	r26, 0x32	; 50
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e2 e3       	ldi	r30, 0x32	; 50
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_Void_SetPinValue+0x1ac>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_Void_SetPinValue+0x1a8>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
				}
				break;
			}
		}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <DIO_Void_GetPinValue>:

void DIO_Void_GetPinValue(u8 Copy_U8_PortNumber, u8 Copy_U8_PinNumber, u8 *Copy_U8_Value)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <DIO_Void_GetPinValue+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <DIO_Void_GetPinValue+0x8>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <DIO_Void_GetPinValue+0xa>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	6a 83       	std	Y+2, r22	; 0x02
    14d8:	5c 83       	std	Y+4, r21	; 0x04
    14da:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_U8_PortNumber)
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3e 83       	std	Y+6, r19	; 0x06
    14e4:	2d 83       	std	Y+5, r18	; 0x05
    14e6:	4d 81       	ldd	r20, Y+5	; 0x05
    14e8:	5e 81       	ldd	r21, Y+6	; 0x06
    14ea:	41 30       	cpi	r20, 0x01	; 1
    14ec:	51 05       	cpc	r21, r1
    14ee:	a1 f1       	breq	.+104    	; 0x1558 <DIO_Void_GetPinValue+0x92>
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	91 05       	cpc	r25, r1
    14f8:	34 f4       	brge	.+12     	; 0x1506 <DIO_Void_GetPinValue+0x40>
    14fa:	2d 81       	ldd	r18, Y+5	; 0x05
    14fc:	3e 81       	ldd	r19, Y+6	; 0x06
    14fe:	21 15       	cp	r18, r1
    1500:	31 05       	cpc	r19, r1
    1502:	71 f0       	breq	.+28     	; 0x1520 <DIO_Void_GetPinValue+0x5a>
    1504:	7c c0       	rjmp	.+248    	; 0x15fe <DIO_Void_GetPinValue+0x138>
    1506:	4d 81       	ldd	r20, Y+5	; 0x05
    1508:	5e 81       	ldd	r21, Y+6	; 0x06
    150a:	42 30       	cpi	r20, 0x02	; 2
    150c:	51 05       	cpc	r21, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <DIO_Void_GetPinValue+0x4c>
    1510:	3f c0       	rjmp	.+126    	; 0x1590 <DIO_Void_GetPinValue+0xca>
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <DIO_Void_GetPinValue+0x58>
    151c:	55 c0       	rjmp	.+170    	; 0x15c8 <DIO_Void_GetPinValue+0x102>
    151e:	6f c0       	rjmp	.+222    	; 0x15fe <DIO_Void_GetPinValue+0x138>
			{
			case PORTA_REG:
				if(BIT_IS_SET(PINA, Copy_U8_PinNumber))
    1520:	e9 e3       	ldi	r30, 0x39	; 57
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a9 01       	movw	r20, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_Void_GetPinValue+0x72>
    1534:	55 95       	asr	r21
    1536:	47 95       	ror	r20
    1538:	8a 95       	dec	r24
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_Void_GetPinValue+0x6e>
    153c:	ca 01       	movw	r24, r20
    153e:	81 70       	andi	r24, 0x01	; 1
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	88 23       	and	r24, r24
    1544:	29 f0       	breq	.+10     	; 0x1550 <DIO_Void_GetPinValue+0x8a>
				{
					*Copy_U8_Value=HIGH;
    1546:	eb 81       	ldd	r30, Y+3	; 0x03
    1548:	fc 81       	ldd	r31, Y+4	; 0x04
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 83       	st	Z, r24
    154e:	57 c0       	rjmp	.+174    	; 0x15fe <DIO_Void_GetPinValue+0x138>

				}
				else
				{
					*Copy_U8_Value=LOW;
    1550:	eb 81       	ldd	r30, Y+3	; 0x03
    1552:	fc 81       	ldd	r31, Y+4	; 0x04
    1554:	10 82       	st	Z, r1
    1556:	53 c0       	rjmp	.+166    	; 0x15fe <DIO_Void_GetPinValue+0x138>

				}
				break;
			case PORTB_REG:
				if(BIT_IS_SET(PINB, Copy_U8_PinNumber))
    1558:	e6 e3       	ldi	r30, 0x36	; 54
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a9 01       	movw	r20, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_Void_GetPinValue+0xaa>
    156c:	55 95       	asr	r21
    156e:	47 95       	ror	r20
    1570:	8a 95       	dec	r24
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_Void_GetPinValue+0xa6>
    1574:	ca 01       	movw	r24, r20
    1576:	81 70       	andi	r24, 0x01	; 1
    1578:	90 70       	andi	r25, 0x00	; 0
    157a:	88 23       	and	r24, r24
    157c:	29 f0       	breq	.+10     	; 0x1588 <DIO_Void_GetPinValue+0xc2>
				{
					*Copy_U8_Value=HIGH;
    157e:	eb 81       	ldd	r30, Y+3	; 0x03
    1580:	fc 81       	ldd	r31, Y+4	; 0x04
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 83       	st	Z, r24
    1586:	3b c0       	rjmp	.+118    	; 0x15fe <DIO_Void_GetPinValue+0x138>

				}
				else
				{
					*Copy_U8_Value=LOW;
    1588:	eb 81       	ldd	r30, Y+3	; 0x03
    158a:	fc 81       	ldd	r31, Y+4	; 0x04
    158c:	10 82       	st	Z, r1
    158e:	37 c0       	rjmp	.+110    	; 0x15fe <DIO_Void_GetPinValue+0x138>


				break;
			case PORTC_REG:
				if(BIT_IS_SET(PINC,Copy_U8_PinNumber))
    1590:	e3 e3       	ldi	r30, 0x33	; 51
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a9 01       	movw	r20, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_Void_GetPinValue+0xe2>
    15a4:	55 95       	asr	r21
    15a6:	47 95       	ror	r20
    15a8:	8a 95       	dec	r24
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_Void_GetPinValue+0xde>
    15ac:	ca 01       	movw	r24, r20
    15ae:	81 70       	andi	r24, 0x01	; 1
    15b0:	90 70       	andi	r25, 0x00	; 0
    15b2:	88 23       	and	r24, r24
    15b4:	29 f0       	breq	.+10     	; 0x15c0 <DIO_Void_GetPinValue+0xfa>
				{
					*Copy_U8_Value=HIGH;
    15b6:	eb 81       	ldd	r30, Y+3	; 0x03
    15b8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 83       	st	Z, r24
    15be:	1f c0       	rjmp	.+62     	; 0x15fe <DIO_Void_GetPinValue+0x138>

				}
				else
				{
					 *Copy_U8_Value= LOW;
    15c0:	eb 81       	ldd	r30, Y+3	; 0x03
    15c2:	fc 81       	ldd	r31, Y+4	; 0x04
    15c4:	10 82       	st	Z, r1
    15c6:	1b c0       	rjmp	.+54     	; 0x15fe <DIO_Void_GetPinValue+0x138>


				}
				break;
			case PORTD_REG:
				if(BIT_IS_SET(PIND ,Copy_U8_PinNumber))
    15c8:	e0 e3       	ldi	r30, 0x30	; 48
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a9 01       	movw	r20, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_Void_GetPinValue+0x11a>
    15dc:	55 95       	asr	r21
    15de:	47 95       	ror	r20
    15e0:	8a 95       	dec	r24
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_Void_GetPinValue+0x116>
    15e4:	ca 01       	movw	r24, r20
    15e6:	81 70       	andi	r24, 0x01	; 1
    15e8:	90 70       	andi	r25, 0x00	; 0
    15ea:	88 23       	and	r24, r24
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <DIO_Void_GetPinValue+0x132>
				{
					*Copy_U8_Value=HIGH;
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 83       	st	Z, r24
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <DIO_Void_GetPinValue+0x138>
				}
				else
				{
					*Copy_U8_Value=LOW;
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	10 82       	st	Z, r1

				}
				break;
				}
			}
}
    15fe:	26 96       	adiw	r28, 0x06	; 6
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <DIO_Void_toggle>:


void DIO_Void_toggle(u8 Copy_U8_PortNumber, u8 Copy_U8_PinNumber)
	{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <DIO_Void_toggle+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <DIO_Void_toggle+0x8>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_U8_PortNumber)
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3c 83       	std	Y+4, r19	; 0x04
    1628:	2b 83       	std	Y+3, r18	; 0x03
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	91 05       	cpc	r25, r1
    1632:	49 f1       	breq	.+82     	; 0x1686 <DIO_Void_toggle+0x76>
    1634:	2b 81       	ldd	r18, Y+3	; 0x03
    1636:	3c 81       	ldd	r19, Y+4	; 0x04
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	2c f4       	brge	.+10     	; 0x1648 <DIO_Void_toggle+0x38>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	61 f0       	breq	.+24     	; 0x165e <DIO_Void_toggle+0x4e>
    1646:	5a c0       	rjmp	.+180    	; 0x16fc <DIO_Void_toggle+0xec>
    1648:	2b 81       	ldd	r18, Y+3	; 0x03
    164a:	3c 81       	ldd	r19, Y+4	; 0x04
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	71 f1       	breq	.+92     	; 0x16ae <DIO_Void_toggle+0x9e>
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	91 05       	cpc	r25, r1
    165a:	e9 f1       	breq	.+122    	; 0x16d6 <DIO_Void_toggle+0xc6>
    165c:	4f c0       	rjmp	.+158    	; 0x16fc <DIO_Void_toggle+0xec>
		{
			case PORTA_REG:
				TOG_BIT(PORTA,Copy_U8_PinNumber);
    165e:	ab e3       	ldi	r26, 0x3B	; 59
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	eb e3       	ldi	r30, 0x3B	; 59
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	48 2f       	mov	r20, r24
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	02 2e       	mov	r0, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_Void_toggle+0x6c>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	0a 94       	dec	r0
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_Void_toggle+0x68>
    1680:	84 27       	eor	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	3b c0       	rjmp	.+118    	; 0x16fc <DIO_Void_toggle+0xec>
			break;
			case PORTB_REG:
				TOG_BIT(PORTB,Copy_U8_PinNumber);
    1686:	a8 e3       	ldi	r26, 0x38	; 56
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e8 e3       	ldi	r30, 0x38	; 56
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_Void_toggle+0x94>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_Void_toggle+0x90>
    16a8:	84 27       	eor	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	27 c0       	rjmp	.+78     	; 0x16fc <DIO_Void_toggle+0xec>
			break;
			case PORTC_REG:
				TOG_BIT(PORTC,Copy_U8_PinNumber);
    16ae:	a5 e3       	ldi	r26, 0x35	; 53
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e3       	ldi	r30, 0x35	; 53
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_Void_toggle+0xbc>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_Void_toggle+0xb8>
    16d0:	84 27       	eor	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	13 c0       	rjmp	.+38     	; 0x16fc <DIO_Void_toggle+0xec>
			break;
			case PORTD_REG:
				TOG_BIT(PORTD,Copy_U8_PinNumber);
    16d6:	a2 e3       	ldi	r26, 0x32	; 50
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e2 e3       	ldi	r30, 0x32	; 50
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_Void_toggle+0xe4>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_Void_toggle+0xe0>
    16f8:	84 27       	eor	r24, r20
    16fa:	8c 93       	st	X, r24
			break;
		}
	}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <ECUAL_LED_Void_INIT>:
#include "LED.h"
#include <util/delay.h>


void ECUAL_LED_Void_INIT  (u8  Copy_U8_LEDPORT , u8 Copy_U8_LEDPIN)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <ECUAL_LED_Void_INIT+0x6>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	6a 83       	std	Y+2, r22	; 0x02
	 DIO_Void_SetPinDirection( Copy_U8_LEDPORT, Copy_U8_LEDPIN, OUTPUT);
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	6a 81       	ldd	r22, Y+2	; 0x02
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_Void_SetPinDirection>
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <ECUAL_LED_Void_LedON>:

void ECUAL_LED_Void_LedON (u8  Copy_U8_LEDPORT , u8 Copy_U8_LEDPIN)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <ECUAL_LED_Void_LedON+0x6>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Void_SetPinValue(Copy_U8_LEDPORT, Copy_U8_LEDPIN, HIGH);
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	6a 81       	ldd	r22, Y+2	; 0x02
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_Void_SetPinValue>
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <ECUAL_LED_Void_LedOff>:

void ECUAL_LED_Void_LedOff(u8  Copy_U8_LEDPORT , u8 Copy_U8_LEDPIN)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <ECUAL_LED_Void_LedOff+0x6>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Void_SetPinValue(Copy_U8_LEDPORT, Copy_U8_LEDPIN, LOW);
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	6a 81       	ldd	r22, Y+2	; 0x02
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_Void_SetPinValue>
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <ECUAL_LED_Void_LedTog>:

void ECUAL_LED_Void_LedTog(u8 Copy_U8_LEDPORT , u8 Copy_U8_LEDPIN)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <ECUAL_LED_Void_LedTog+0x6>
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Void_toggle(Copy_U8_LEDPORT,Copy_U8_LEDPIN);
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	6a 81       	ldd	r22, Y+2	; 0x02
    1782:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_Void_toggle>
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <ECUAL_Void_BUTTON_INIT>:
 */

#include "BUTTONS.h"

void ECUAL_Void_BUTTON_INIT(u8 Copy_U8_Button_Port, u8 Copy_U8_Button_Pin)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <ECUAL_Void_BUTTON_INIT+0x6>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Void_SetPinDirection (Copy_U8_Button_Port, Copy_U8_Button_Pin, INPUT);
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	6a 81       	ldd	r22, Y+2	; 0x02
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_Void_SetPinDirection>
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <ECUAL_Void_BUTTON_READ>:

void ECUAL_Void_BUTTON_READ(u8 Copy_U8_Button_Port, u8 Copy_U8_Button_Pin, u8 * Copy_value)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <ECUAL_Void_BUTTON_READ+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <ECUAL_Void_BUTTON_READ+0x8>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	6a 83       	std	Y+2, r22	; 0x02
    17c2:	5c 83       	std	Y+4, r21	; 0x04
    17c4:	4b 83       	std	Y+3, r20	; 0x03
	DIO_Void_GetPinValue( Copy_U8_Button_Port, Copy_U8_Button_Pin, Copy_value );
    17c6:	2b 81       	ldd	r18, Y+3	; 0x03
    17c8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	6a 81       	ldd	r22, Y+2	; 0x02
    17ce:	a9 01       	movw	r20, r18
    17d0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_Void_GetPinValue>

}
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <APP_Void_AppInit>:
 1- Initialize port A, Green, Yellow, and Red as LEDs for cars
 2- Initialize port B, Green, Yellow, and Red as LEDs for pedestrians
 3- Initialize push button, Timer 0, interrupt 0
 */
void APP_Void_AppInit(void)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
		// CAR_LEDS INITIALIZATIONSS
	ECUAL_LED_Void_INIT(PORTA_REG,PIN0);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	0e 94 85 0b 	call	0x170a	; 0x170a <ECUAL_LED_Void_INIT>
	ECUAL_LED_Void_INIT(PORTA_REG,PIN1);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	61 e0       	ldi	r22, 0x01	; 1
    17f6:	0e 94 85 0b 	call	0x170a	; 0x170a <ECUAL_LED_Void_INIT>
	ECUAL_LED_Void_INIT(PORTA_REG,PIN2);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	62 e0       	ldi	r22, 0x02	; 2
    17fe:	0e 94 85 0b 	call	0x170a	; 0x170a <ECUAL_LED_Void_INIT>

		// LEDS INIT
	ECUAL_LED_Void_INIT(PORTB_REG,PIN0);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	0e 94 85 0b 	call	0x170a	; 0x170a <ECUAL_LED_Void_INIT>
	ECUAL_LED_Void_INIT(PORTB_REG,PIN1);
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	0e 94 85 0b 	call	0x170a	; 0x170a <ECUAL_LED_Void_INIT>
	ECUAL_LED_Void_INIT(PORTB_REG,PIN2);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	62 e0       	ldi	r22, 0x02	; 2
    1816:	0e 94 85 0b 	call	0x170a	; 0x170a <ECUAL_LED_Void_INIT>

		//Push BUTTON INIT
	ECUAL_Void_BUTTON_INIT(PORTD_REG, PIN2);
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	62 e0       	ldi	r22, 0x02	; 2
    181e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <ECUAL_Void_BUTTON_INIT>

		// Timer 0 INIT
	MCAL_Void_Timer0_Init();
    1822:	0e 94 45 07 	call	0xe8a	; 0xe8a <MCAL_Void_Timer0_Init>

		// Interrupt 0 INIT
	MCAL_Void_Interrupt0_init();
    1826:	0e 94 87 08 	call	0x110e	; 0x110e <MCAL_Void_Interrupt0_init>
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <APP_Void_AppStart>:
 * This function takes void and return void
 * Cars' LEDs will be changed every five seconds, Pedestrians' LEDs is opposite to cars' LEDs
 * The Yellow LED of both  will blink for five seconds before moving to Green or Red LEDs.
 */
void APP_Void_AppStart(void)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	ECUAL_LED_Void_LedON(PORTA_REG,PIN0);                                             // Green led for cars & Red led for ped is on for five seconds
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
	ECUAL_LED_Void_LedON(PORTB_REG,PIN2);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
	MCAL_Void_Timer0_delay(5000);
    1848:	88 e8       	ldi	r24, 0x88	; 136
    184a:	93 e1       	ldi	r25, 0x13	; 19
    184c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>

// After 5 second  Green led for cars & Red led for ped. switched OFF
// yellow LEDs of both will blinking for five second
	ECUAL_LED_Void_LedOff(PORTA_REG,PIN0);
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	ECUAL_LED_Void_LedOff(PORTB_REG,PIN2);
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	62 e0       	ldi	r22, 0x02	; 2
    185c:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	APP_Void_BlinkingYellow ();
    1860:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <APP_Void_BlinkingYellow>
	ECUAL_LED_Void_LedOff(PORTA_REG,PIN1);
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	ECUAL_LED_Void_LedOff(PORTB_REG,PIN1);
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>

// After yellow blinking for 5 seconds Red led for cars and green led for ped. is on for five seconds
// yellow blinking again
	ECUAL_LED_Void_LedON(PORTA_REG,PIN2);
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	62 e0       	ldi	r22, 0x02	; 2
    1878:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
	ECUAL_LED_Void_LedON(PORTB_REG,PIN0);
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
	MCAL_Void_Timer0_delay(5000);
    1884:	88 e8       	ldi	r24, 0x88	; 136
    1886:	93 e1       	ldi	r25, 0x13	; 19
    1888:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	ECUAL_LED_Void_LedOff(PORTA_REG,PIN2);
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	62 e0       	ldi	r22, 0x02	; 2
    1890:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	ECUAL_LED_Void_LedOff(PORTB_REG,PIN0);
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	APP_Void_BlinkingYellow ();
    189c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <APP_Void_BlinkingYellow>
	ECUAL_LED_Void_LedOff(PORTA_REG,PIN1);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	ECUAL_LED_Void_LedOff(PORTB_REG,PIN1);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>

}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <APP_Void_BlinkingYellow>:

/*
 * This function takes void and return void and it toggles the yellow leds of both cars and ped.
 */
void APP_Void_BlinkingYellow ()
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
	Local_Boolean_YellowbBlinking = 1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	80 93 68 01 	sts	0x0168, r24
    ECUAL_LED_Void_LedTog(PORTA_REG,PIN1);
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
    ECUAL_LED_Void_LedTog(PORTB_REG,PIN1);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	MCAL_Void_Timer0_delay(500);
    18d4:	84 ef       	ldi	r24, 0xF4	; 244
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	ECUAL_LED_Void_LedTog(PORTA_REG,PIN1);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	ECUAL_LED_Void_LedTog(PORTB_REG,PIN1);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	MCAL_Void_Timer0_delay(500);
    18ec:	84 ef       	ldi	r24, 0xF4	; 244
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	ECUAL_LED_Void_LedTog(PORTA_REG,PIN1);
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	ECUAL_LED_Void_LedTog(PORTB_REG,PIN1);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	MCAL_Void_Timer0_delay(1000);
    1904:	88 ee       	ldi	r24, 0xE8	; 232
    1906:	93 e0       	ldi	r25, 0x03	; 3
    1908:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	ECUAL_LED_Void_LedTog(PORTA_REG,PIN1);
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	ECUAL_LED_Void_LedTog(PORTB_REG,PIN1);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	MCAL_Void_Timer0_delay(500);
    191c:	84 ef       	ldi	r24, 0xF4	; 244
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	ECUAL_LED_Void_LedTog(PORTA_REG,PIN1);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	ECUAL_LED_Void_LedTog(PORTB_REG,PIN1);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	MCAL_Void_Timer0_delay(500);
    1934:	84 ef       	ldi	r24, 0xF4	; 244
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	ECUAL_LED_Void_LedTog(PORTA_REG,PIN1);
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	61 e0       	ldi	r22, 0x01	; 1
    1940:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	ECUAL_LED_Void_LedTog(PORTB_REG,PIN1);
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	MCAL_Void_Timer0_delay(1000);
    194c:	88 ee       	ldi	r24, 0xE8	; 232
    194e:	93 e0       	ldi	r25, 0x03	; 3
    1950:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	ECUAL_LED_Void_LedTog(PORTA_REG,PIN1);
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	ECUAL_LED_Void_LedTog(PORTB_REG,PIN1);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	MCAL_Void_Timer0_delay(500);
    1964:	84 ef       	ldi	r24, 0xF4	; 244
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	ECUAL_LED_Void_LedTog(PORTA_REG,PIN1);
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	ECUAL_LED_Void_LedTog(PORTB_REG,PIN1);
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ECUAL_LED_Void_LedTog>
	MCAL_Void_Timer0_delay(500);
    197c:	84 ef       	ldi	r24, 0xF4	; 244
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	Local_Boolean_YellowbBlinking = 0;
    1984:	10 92 68 01 	sts	0x0168, r1
}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <APP_Void_Allowped>:
 *case 2:If pressed when the cars' Green LED is on or the cars' Yellow LED is blinking,
 *the pedestrian Red LED will be on -- then both Yellow LEDs start to blink for five seconds,the cars' Red LED and pedestrian Green LEDs are on for five seconds,
 */

void APP_Void_Allowped ()
{              //case 1
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	if ( BIT_IS_SET(PINA,PIN2) )
    1996:	e9 e3       	ldi	r30, 0x39	; 57
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	84 70       	andi	r24, 0x04	; 4
    19a2:	90 70       	andi	r25, 0x00	; 0
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	69 f0       	breq	.+26     	; 0x19c2 <APP_Void_Allowped+0x34>
	 {   ECUAL_LED_Void_LedON(PORTA_REG,PIN2);
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	62 e0       	ldi	r22, 0x02	; 2
    19ac:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
	     ECUAL_LED_Void_LedON(PORTB_REG,PIN0);
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
	     MCAL_Void_Timer0_delay(5000);
    19b8:	88 e8       	ldi	r24, 0x88	; 136
    19ba:	93 e1       	ldi	r25, 0x13	; 19
    19bc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
    19c0:	2f c0       	rjmp	.+94     	; 0x1a20 <APP_Void_Allowped+0x92>
	 }
	          //case 2
	 else if ( BIT_IS_SET(PINA,PIN0) ||   Local_Boolean_YellowbBlinking ==1)
    19c2:	e9 e3       	ldi	r30, 0x39	; 57
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	81 70       	andi	r24, 0x01	; 1
    19ce:	90 70       	andi	r25, 0x00	; 0
    19d0:	88 23       	and	r24, r24
    19d2:	21 f4       	brne	.+8      	; 0x19dc <APP_Void_Allowped+0x4e>
    19d4:	80 91 68 01 	lds	r24, 0x0168
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	11 f5       	brne	.+68     	; 0x1a20 <APP_Void_Allowped+0x92>
	 {
		  ECUAL_LED_Void_LedOff(PORTA_REG,PIN0);                              // the pedestrian Red LED will be on
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
		  ECUAL_LED_Void_LedON(PORTB_REG,PIN2);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>

		  APP_Void_BlinkingYellow ();                                         // then both Yellow LEDs start to blink for five seconds,
    19ec:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <APP_Void_BlinkingYellow>
	      ECUAL_LED_Void_LedOff(PORTA_REG,PIN1);
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	      ECUAL_LED_Void_LedOff(PORTB_REG,PIN1);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	61 e0       	ldi	r22, 0x01	; 1
    19fc:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	      ECUAL_LED_Void_LedOff(PORTB_REG,PIN2);
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	62 e0       	ldi	r22, 0x02	; 2
    1a04:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	                                                                          // then the cars' Red LED and pedestrian Green LEDs are on for five seconds
	      ECUAL_LED_Void_LedON(PORTA_REG,PIN2);
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	62 e0       	ldi	r22, 0x02	; 2
    1a0c:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
		  ECUAL_LED_Void_LedON(PORTB_REG,PIN0);
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
		  MCAL_Void_Timer0_delay(5000);
    1a18:	88 e8       	ldi	r24, 0x88	; 136
    1a1a:	93 e1       	ldi	r25, 0x13	; 19
    1a1c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	 }

// 	 the cars' Red LED will be off and both Yellow LEDs start blinking for 5 seconds ,and the pedestrian's Green LED is still on
	    ECUAL_LED_Void_LedOff(PORTA_REG,PIN2);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	62 e0       	ldi	r22, 0x02	; 2
    1a24:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	    APP_Void_BlinkingYellow ();
    1a28:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <APP_Void_BlinkingYellow>
		ECUAL_LED_Void_LedOff(PORTA_REG,PIN1);
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
		ECUAL_LED_Void_LedOff(PORTB_REG,PIN1);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>

//   After 5 seconds the pedestrian Green LED will be off , both the pedestrian Red LED and the cars' Green LED will be on.
		ECUAL_LED_Void_LedOff(PORTB,PIN0);
    1a3c:	e8 e3       	ldi	r30, 0x38	; 56
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
		ECUAL_LED_Void_LedON(PORTA_REG,PIN0);
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
		ECUAL_LED_Void_LedON(PORTB_REG,PIN2);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	62 e0       	ldi	r22, 0x02	; 2
    1a54:	0e 94 96 0b 	call	0x172c	; 0x172c <ECUAL_LED_Void_LedON>
		MCAL_Void_Timer0_delay(5000);
    1a58:	88 e8       	ldi	r24, 0x88	; 136
    1a5a:	93 e1       	ldi	r25, 0x13	; 19
    1a5c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MCAL_Void_Timer0_delay>
	    ECUAL_LED_Void_LedOff(PORTA_REG,PIN0);  // GREEN LED FOR CAR
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>
	    ECUAL_LED_Void_LedOff(PORTB_REG,PIN2);
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	62 e0       	ldi	r22, 0x02	; 2
    1a6c:	0e 94 a7 0b 	call	0x174e	; 0x174e <ECUAL_LED_Void_LedOff>

}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <ISR>:

ISR (INT0_vect)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <ISR+0x6>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <ISR+0x8>
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01
	APP_Void_Allowped ();
    1a86:	0e 94 c7 0c 	call	0x198e	; 0x198e <APP_Void_Allowped>

}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <main>:
#include"APP/APP.h"
//#include "TestMain_LED.h"
//#include"TestMain_BUTTONS.h"
//#include"TestMain_TImer.h"
int main (void)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
	//testing_timers();
	//testing_buttons();
	//testing_leds();
	APP_Void_AppInit();
    1aa0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <APP_Void_AppInit>
		 while (1)
		 {

			 APP_Void_AppStart();
    1aa4:	0e 94 18 0c 	call	0x1830	; 0x1830 <APP_Void_AppStart>
    1aa8:	fd cf       	rjmp	.-6      	; 0x1aa4 <main+0xc>

00001aaa <__prologue_saves__>:
    1aaa:	2f 92       	push	r2
    1aac:	3f 92       	push	r3
    1aae:	4f 92       	push	r4
    1ab0:	5f 92       	push	r5
    1ab2:	6f 92       	push	r6
    1ab4:	7f 92       	push	r7
    1ab6:	8f 92       	push	r8
    1ab8:	9f 92       	push	r9
    1aba:	af 92       	push	r10
    1abc:	bf 92       	push	r11
    1abe:	cf 92       	push	r12
    1ac0:	df 92       	push	r13
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	ca 1b       	sub	r28, r26
    1ad4:	db 0b       	sbc	r29, r27
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	09 94       	ijmp

00001ae2 <__epilogue_restores__>:
    1ae2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ae4:	39 88       	ldd	r3, Y+17	; 0x11
    1ae6:	48 88       	ldd	r4, Y+16	; 0x10
    1ae8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aea:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aec:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aee:	8c 84       	ldd	r8, Y+12	; 0x0c
    1af0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1af2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1af4:	b9 84       	ldd	r11, Y+9	; 0x09
    1af6:	c8 84       	ldd	r12, Y+8	; 0x08
    1af8:	df 80       	ldd	r13, Y+7	; 0x07
    1afa:	ee 80       	ldd	r14, Y+6	; 0x06
    1afc:	fd 80       	ldd	r15, Y+5	; 0x05
    1afe:	0c 81       	ldd	r16, Y+4	; 0x04
    1b00:	1b 81       	ldd	r17, Y+3	; 0x03
    1b02:	aa 81       	ldd	r26, Y+2	; 0x02
    1b04:	b9 81       	ldd	r27, Y+1	; 0x01
    1b06:	ce 0f       	add	r28, r30
    1b08:	d1 1d       	adc	r29, r1
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	ed 01       	movw	r28, r26
    1b16:	08 95       	ret

00001b18 <ceil>:
    1b18:	3b d0       	rcall	.+118    	; 0x1b90 <__fp_trunc>
    1b1a:	80 f0       	brcs	.+32     	; 0x1b3c <ceil+0x24>
    1b1c:	9f 37       	cpi	r25, 0x7F	; 127
    1b1e:	40 f4       	brcc	.+16     	; 0x1b30 <ceil+0x18>
    1b20:	91 11       	cpse	r25, r1
    1b22:	0e f4       	brtc	.+2      	; 0x1b26 <ceil+0xe>
    1b24:	4d c0       	rjmp	.+154    	; 0x1bc0 <__fp_szero>
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	80 e8       	ldi	r24, 0x80	; 128
    1b2c:	9f e3       	ldi	r25, 0x3F	; 63
    1b2e:	08 95       	ret
    1b30:	26 f0       	brts	.+8      	; 0x1b3a <ceil+0x22>
    1b32:	1b 16       	cp	r1, r27
    1b34:	61 1d       	adc	r22, r1
    1b36:	71 1d       	adc	r23, r1
    1b38:	81 1d       	adc	r24, r1
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <__fp_mintl>
    1b3c:	1b c0       	rjmp	.+54     	; 0x1b74 <__fp_mpack>

00001b3e <__fp_mintl>:
    1b3e:	88 23       	and	r24, r24
    1b40:	71 f4       	brne	.+28     	; 0x1b5e <__fp_mintl+0x20>
    1b42:	77 23       	and	r23, r23
    1b44:	21 f0       	breq	.+8      	; 0x1b4e <__fp_mintl+0x10>
    1b46:	98 50       	subi	r25, 0x08	; 8
    1b48:	87 2b       	or	r24, r23
    1b4a:	76 2f       	mov	r23, r22
    1b4c:	07 c0       	rjmp	.+14     	; 0x1b5c <__fp_mintl+0x1e>
    1b4e:	66 23       	and	r22, r22
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <__fp_mintl+0x18>
    1b52:	99 27       	eor	r25, r25
    1b54:	0d c0       	rjmp	.+26     	; 0x1b70 <__fp_mintl+0x32>
    1b56:	90 51       	subi	r25, 0x10	; 16
    1b58:	86 2b       	or	r24, r22
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	2a f0       	brmi	.+10     	; 0x1b6a <__fp_mintl+0x2c>
    1b60:	9a 95       	dec	r25
    1b62:	66 0f       	add	r22, r22
    1b64:	77 1f       	adc	r23, r23
    1b66:	88 1f       	adc	r24, r24
    1b68:	da f7       	brpl	.-10     	; 0x1b60 <__fp_mintl+0x22>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	96 95       	lsr	r25
    1b6e:	87 95       	ror	r24
    1b70:	97 f9       	bld	r25, 7
    1b72:	08 95       	ret

00001b74 <__fp_mpack>:
    1b74:	9f 3f       	cpi	r25, 0xFF	; 255
    1b76:	31 f0       	breq	.+12     	; 0x1b84 <__fp_mpack_finite+0xc>

00001b78 <__fp_mpack_finite>:
    1b78:	91 50       	subi	r25, 0x01	; 1
    1b7a:	20 f4       	brcc	.+8      	; 0x1b84 <__fp_mpack_finite+0xc>
    1b7c:	87 95       	ror	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	b7 95       	ror	r27
    1b84:	88 0f       	add	r24, r24
    1b86:	91 1d       	adc	r25, r1
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	97 f9       	bld	r25, 7
    1b8e:	08 95       	ret

00001b90 <__fp_trunc>:
    1b90:	25 d0       	rcall	.+74     	; 0x1bdc <__fp_splitA>
    1b92:	a0 f0       	brcs	.+40     	; 0x1bbc <__fp_trunc+0x2c>
    1b94:	be e7       	ldi	r27, 0x7E	; 126
    1b96:	b9 17       	cp	r27, r25
    1b98:	88 f4       	brcc	.+34     	; 0x1bbc <__fp_trunc+0x2c>
    1b9a:	bb 27       	eor	r27, r27
    1b9c:	9f 38       	cpi	r25, 0x8F	; 143
    1b9e:	60 f4       	brcc	.+24     	; 0x1bb8 <__fp_trunc+0x28>
    1ba0:	16 16       	cp	r1, r22
    1ba2:	b1 1d       	adc	r27, r1
    1ba4:	67 2f       	mov	r22, r23
    1ba6:	78 2f       	mov	r23, r24
    1ba8:	88 27       	eor	r24, r24
    1baa:	98 5f       	subi	r25, 0xF8	; 248
    1bac:	f7 cf       	rjmp	.-18     	; 0x1b9c <__fp_trunc+0xc>
    1bae:	86 95       	lsr	r24
    1bb0:	77 95       	ror	r23
    1bb2:	67 95       	ror	r22
    1bb4:	b1 1d       	adc	r27, r1
    1bb6:	93 95       	inc	r25
    1bb8:	96 39       	cpi	r25, 0x96	; 150
    1bba:	c8 f3       	brcs	.-14     	; 0x1bae <__fp_trunc+0x1e>
    1bbc:	08 95       	ret

00001bbe <__fp_zero>:
    1bbe:	e8 94       	clt

00001bc0 <__fp_szero>:
    1bc0:	bb 27       	eor	r27, r27
    1bc2:	66 27       	eor	r22, r22
    1bc4:	77 27       	eor	r23, r23
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	97 f9       	bld	r25, 7
    1bca:	08 95       	ret

00001bcc <__fp_split3>:
    1bcc:	57 fd       	sbrc	r21, 7
    1bce:	90 58       	subi	r25, 0x80	; 128
    1bd0:	44 0f       	add	r20, r20
    1bd2:	55 1f       	adc	r21, r21
    1bd4:	59 f0       	breq	.+22     	; 0x1bec <__fp_splitA+0x10>
    1bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd8:	71 f0       	breq	.+28     	; 0x1bf6 <__fp_splitA+0x1a>
    1bda:	47 95       	ror	r20

00001bdc <__fp_splitA>:
    1bdc:	88 0f       	add	r24, r24
    1bde:	97 fb       	bst	r25, 7
    1be0:	99 1f       	adc	r25, r25
    1be2:	61 f0       	breq	.+24     	; 0x1bfc <__fp_splitA+0x20>
    1be4:	9f 3f       	cpi	r25, 0xFF	; 255
    1be6:	79 f0       	breq	.+30     	; 0x1c06 <__fp_splitA+0x2a>
    1be8:	87 95       	ror	r24
    1bea:	08 95       	ret
    1bec:	12 16       	cp	r1, r18
    1bee:	13 06       	cpc	r1, r19
    1bf0:	14 06       	cpc	r1, r20
    1bf2:	55 1f       	adc	r21, r21
    1bf4:	f2 cf       	rjmp	.-28     	; 0x1bda <__fp_split3+0xe>
    1bf6:	46 95       	lsr	r20
    1bf8:	f1 df       	rcall	.-30     	; 0x1bdc <__fp_splitA>
    1bfa:	08 c0       	rjmp	.+16     	; 0x1c0c <__fp_splitA+0x30>
    1bfc:	16 16       	cp	r1, r22
    1bfe:	17 06       	cpc	r1, r23
    1c00:	18 06       	cpc	r1, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	f1 cf       	rjmp	.-30     	; 0x1be8 <__fp_splitA+0xc>
    1c06:	86 95       	lsr	r24
    1c08:	71 05       	cpc	r23, r1
    1c0a:	61 05       	cpc	r22, r1
    1c0c:	08 94       	sec
    1c0e:	08 95       	ret

00001c10 <_exit>:
    1c10:	f8 94       	cli

00001c12 <__stop_program>:
    1c12:	ff cf       	rjmp	.-2      	; 0x1c12 <__stop_program>
